bisect() -> binary search 통해 삽입위치 반환 or 삽입
-----------------------------------------------------------------------------------
상하좌우 
dx=[1, 0, -1, 0]
dy=[0, 1, 0, -1]
-----------------------------------------------------------------------------------
a, b = input().split(':')
print(a, b, sep=':')	<->     for i in range(0, 3):
		                  print(i, end=' ')

-----------------------------------------------------------------------------------

s1 = 'name : {0}'.format('BlockDMask')
print(s1)
age = 55
s2 = 'age : {0}'.format(age)
print(s2)
s3 = 'number : {num}, gender : {gen}'.format(num=1234, gen='남')
print(s3)

-----------------------------------------------------------------------------------
list(sys.stdin.readline().split()) => ['abcde']
list(sys.stdin.readline()) => ['a', 'b', 'c', 'd', 'e', '\n']

input이 띄어쓰기가 안되어있을 때: (ex 1000000000)
	plate = sys.stdin.readline().split()
	print(plate[0][0], plate[0][1]) => 1, 0 (문자열로)
-----------------------------------------------------------------------------------

s1, s2 = map(int, input().split())
print(s1 + s2)

input()  -> str
input().split -> list
map(int, input().split()) -> map

-----------------------------------------------------------------------------------

a = float(input())
a = '{:0.2f}'.format(a) # 콜론 앞에는 인덱스/ 콜론뒤 점 앞에 정렬할 길이, 콜론뒤 점 뒤에 소수점 이하 자릿수
# a = '{0:0.2f}'.format(a) 
print(a)

a = float(input())
print(format(a, ".2f"))

a = float(input())
print(f'{a:.2f}') # fstring은 뒤에 .format(변수) 필요없이 바로 변수를 {} 안에 넣는 방식, 세미콜론 앞 인덱스가 아니라 변수 자체
	      # print(f'{n:#X}*{i:#X}*{n*i:#X}') -> 16진수 표기

-----------------------------------------------------------------------------------

print("{1:d} {0} {owner} blog".format("this", 12, owner="lemoncandy's"))
print("{0}은 {1:10.2f}입니다.".format("원주율", 3.141592))
print("%d번 학생은 합격입니다." % number)

-----------------------------------------------------------------------------------

num = int(input())
student = input().split() -> 동적 할당이고 머시고 할 필요 없이 그냥 받으면 리스트로 받아짐
			  -> 그건 모르겠고 split()이 리스트 return임
result = []

for i in range(23):
    result.append(0) -> 23개의 0으로 채워진 리스트 생성
for i in range(num):
    student[i] = int(student[i]) -> 리스트는 map(int)로 받을수가 없음
for i in range(num):
    result[student[i] - 1] += 1

for i in range(23):
    print(result[i], end=' ')

-----------------------------------------------------------------------------------
editor = list(sys.stdin.readline())
print(editor, type(editor))     -> ['a', 'b', 'c', 'd', '\n'] <class 'list'>

editor = sys.stdin.readline()
print(editor, type(editor))     -> abcd <class 'str'>

editor = sys.stdin.readline().split()
print(editor, type(editor))     -> ['abcd'] <class 'list'>

editor=list(map(int,sys.stdin.readline().split()))
print(editor, type(editor))	-> [1234] <class 'list'>

-----------------------------------------------------------------------------------

for i in range(N):
        result.append(i)
        
result = [0]*N  #한번에 N개의 공간을 0으로
    for i in range(N):
        result[i] = i
        
return range(N) #built-in 함수 -> 가장 성능이 좋음

-----------------------------------------------------------------------------------

plate = [list(map(int, input().split())) for _ in range(n)] #2차원 배열 입력+생성

-----------------------------------------------------------------------------------

wordset = set(wordlist)
wordlist = list(wordset)# 중복제거

-----------------------------------------------------------------------------------

원소와 인덱스 동시 접근하려면 enumerate!
for i, letter in enumerate(['A', 'B', 'C'], start = 1):
    print(i, letter)
   
+) 얘는 queue = [(i, p) for i, p in enumerate(prior)] 과 같은 식으로 저장해서 pop, append해도 원래의 위치 정보를 유지 가능

-----------------------------------------------------------------------------------

wordlist = sorted(wordlist)#sorted는 stable sort
wordlist = sorted(wordlist, key=lambda word: len(word))#lambda식 활용하여 길이로 sort한번 더

https://deepwelloper.tistory.com/entry/BOJ-%ED%8C%8C%EC%9D%B4%EC%8D%ACPython-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%B0%8F-Tip


https://livlikwav.github.io/python/python-mutable-and-namespace/

-----------------------------------------------------------------------------------

"Python Special Method"

-----------------------------------------------------------------------------------

sys.stdin.readline() => string
sys.stdin.readline().split() => list
map(int, sys.stdin.readline().split()) -> map
list(map(int, sys.stdin.readline().split())) => list

-----------------------------------------------------------------------------------
import collections

def solution(participant, completion):
    answer = collections.Counter(participant) - collections.Counter(completion)
    return list(answer.keys())[0]
// counter는 리스트 원소들의 개수 return
// 두 리스트 간의 차이(원소 하나) 구하기 

-----------------------------------------------------------------------------------
< 프로그래머스 > 해시 > 베스트앨범 >
1. dictionary 만들 때 genres는 중복제거 해야하므로 set  --> d = {e:[] for e in set(genres)}

2. 미리 zip으로 리스트 만들어 놓고 dictionary에 붙이기
for e in zip(genres, plays, range(len(plays))):
        d[e[0]].append([e[1] , e[2]])

d의 모습: {'pop': [[150, 2], [100, 5]], 'asdf': [[500, 0]], 'classic': [[600, 1], [800, 3], [800, 4]]} 

3. map과 lambda 사용 ==> list(map(lambda x:(x//10)*(x%10), range(10,100)))
genreSort =sorted(list(d.keys()), key= lambda x: sum( map(lambda y: y[0],d[x])), reverse = True)
<-> 아니면 key= lambda x: sum([t[0] for t in d[x]])

genreSort의 모습( 들은 수의 합으로 정렬 ) ==> ['classic', 'asdf', 'pop']

4. 여기서 e는 d의 key(sort된 d[g])를 순회하는 iterator, 여기서 람다 이렇게 설정해서 sort기준 제한
for g in genreSort:
    temp = [e[1] for e in sorted(d[g],key= lambda x: (x[0], -x[1]), reverse = True)]
    answer += temp[:min(len(temp),2)]
두개(한개밖에 없으면 한개)이므로 len(temp)와 2중에서 작은걸로 슬라이싱

-----------------------------------------------------------------------------------

<dictionary>

딕셔너리 안에 찾으려는 Key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져오게 하고 싶을 때에는 get(x, '디폴트 값') 사용
ex) dic.get(genres[i], 0) - 존재유무를 확인할 필요가 x

※ min, max
key - min(dict.keys())
value - min(dict.values())
최소 value 가지는 key - min(dict, key=dict.get)
		      - min(dict, key= lambda x : dict_nums[x]))
최소 길이 value - longest = min(dict, key= lambda n: len(n))

-----------------------------------------------------------------------------------
INF = int(2e9)
